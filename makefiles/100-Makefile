# Makefile for creating the 'school' executable

# Compiler and compiler flags
CC = gcc
CFLAGS = -Wall -Werror -Wextra -pedantic  # Add your desired flags here

# Flags to be used in the compilation
MYCFLAGS = $(CFLAGS)

# Source files
SRC = main.c school.c  # Add your source files here

# Object files derived from source files
OBJ = $(SRC:.c=.o)

# Executable name
NAME = school

# Header file
HEADER = m.h

# Files to remove
FILES_TO_REMOVE = $(OBJ) $(NAME) *~ \#*#

# Compiler and compile command
COMPILER = $(CC) $(MYCFLAGS)

# Default rule
all: $(NAME)

# Check if the header file exists
ifeq ($(wildcard $(HEADER)),)
$(NAME):
	@echo "Error: The header file $(HEADER) is missing."
	@exit 1
else
$(NAME): $(OBJ)
	$(COMPILER) -o $@ $^
endif

# Pattern rule to build individual object files
%.o: %.c $(HEADER)
	$(COMPILER) -c -o $@ $<

# Clean rule to remove object files and the executable
clean:
	$(RM) $(FILES_TO_REMOVE)

# Rule to remove only object files
oclean:
	$(RM) $(OBJ)

# Rule to remove object files, executable, and temporary editor files
fclean: clean

# Rule to force recompilation of all source files
re: fclean all

# Phony targets to prevent conflicts with files named 'all' or 'clean'
.PHONY: all clean oclean fclean re
