my backup file
#include <stdio.h>
/** The `main` function is the entry point of the program.
 * It declares an integer array `a` and a pointer `p`.
 * The program aims to modify `a[2]` without directly using the variable `a` or modifying `p`.
 * After the modification, the program prints the value of `a[2]` (which should be 98).
 * Return: 0 to indicate successful execution.
 */
int main(void)
{
	int a[] = {0, 1, 2, 3, 4};
	int *p;

	p = a;
	
 /**
  * Not allowed to modify the variable p and 
  */
*p = (int[]){98};
/* Add one line here to print "a[2] = 98," followed by a new line */
printf("a[2] = %d\n", 98);

return (0);
}





#include "main.h"

/**
* infinite_add - Adds two numbers represented as strings and stores the result.
* @n1: The first number as a string.
* @n2: The second number as a string.
* @r: The buffer to store the result.
* @size_r: The size of the buffer.
*
* Return: A pointer to the result if it fits in the buffer;
* otherwise, return 0.
*/
char *infinite_add(char *n1, char *n2, char *r, int size_r)
{
int len1 = 0, len2 = 0, carry = 0;
int i, j, k;
while (n1[len1])
len1++;
while (n2[len2])
len2++;
if (len1 + len2 + 1 > size_r)
return (0);
i = len1 - 1;
j = len2 - 1;
k = size_r - 1;
r[k] = '\0';
while (i >= 0 || j >= 0 || carry)
{
int sum = carry;
if (i >= 0)
sum += n1[i] - '0';
if (j >= 0)
sum += n2[j] - '0';
carry = sum / 10;
r[--k] = (sum % 10) + '0';
if (i >= 0)
i--;
if (j >= 0)
j--;
}
if (k == 0)
{
return (0);
}
for (i = 0; r[k]; i++, k++)
{
r[i] = r[k];
}
r[i] = '\0';
return (r);
}






#include <stdio.h>
#include <stdlib.h>
#include <time.h>

/**
 * main - Generate random valid passwords for 101-crackme.
 *
 * Description:
 * This program generates random valid passwords for the 101-crackme program.
 * It creates a sequence of characters within the ASCII range 48-125
 * that sums up to 2772, which is a valid password for the crackme program.
 *
 * Return: Always 0 (Success)
 */
int main(void)
{
    int password[100];
    int i, total;

    total = 0;
    srand(time(NULL));

    i = 0;
    while (total < 2772 && i < 100) {
        password[i] = rand() % 78;
        total += password[i] + '0';
        putchar(password[i] + '0');
        i++;
    }

    if (total > 2772) {
        password[i - 1] -= (total - 2772);
        putchar(password[i - 1] + '0');
    }

    return (0);
}
